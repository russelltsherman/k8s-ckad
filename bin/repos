#!/usr/bin/env bash
# shellcheck disable=SC1091

# find script location
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# ensure build harness has been initialized
[ -d "${DIR}/../build-harness/lib" ] || make init

# shellcheck source=./../build-harness/lib/bash.sh
source "${DIR}/../build-harness/lib/bash.sh"

cmd="$1"

case $cmd in
    pull)
        action "clone or update repos in manifest"
        ;;
    init)
        action "initialize repos in manifest"
        ;;
esac

while IFS="" read -r item || [ -n "$item" ]
do
    # ignore commented lines
    [[ $item == "#"* ]] && continue

    org=$(echo "$item" | cut -d/ -f1)
    repo=$(echo "$item" | cut -d/ -f2)
    echo ""
    echo "$item"
    echo "#######################################################################"

    case $cmd in
        pull)
            git_clone_or_update "git@github.com:$org/$repo.git" "${REPO_PATH}/$repo"
            ;;
        init)
            # if the project has a makefile call it's default target
            [ -f "${REPO_PATH}/${repo}/Makefile" ] && (
                cd "${REPO_PATH}/${repo}" && make
            )
            ;;
        *)
            die "$cmd is not a command i recognize"
            ;;
    esac

done < $DIR/../repo-manifest
